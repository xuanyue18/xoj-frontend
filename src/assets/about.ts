export const ABOUT_CONTENT =
  "## 项目介绍 \n" +
  "\n" +
  "OJ  = Online Judge 在线判题评测系统\n" +
  "\n" +
  "用户可以选择题目，在线做题，编写代码并且提交代码；系统会对用户提交的代码，根据我们出题人设置的答案，来判断用户的提交结果是否正确。\n" +
  "\n" +
  "ACM（程序设计竞赛），也是需要依赖判题系统来检测参赛者的答案是否合理\n" +
  "\n" +
  "OJ 系统最大的难点在于 **判题系统**\n" +
  "\n" +
  "用于在线评测编程题目代码的系统，能够根据用户提交的代码、出题人预先设置的题目输入和输出用例，进行编译代码、运行代码、判断代码运行结果是否正确。\n" +
  "判题系统作为一个开放 API 提供给大家，便于开发者开发自己的 OJ 系统。\n" +
  "\n" +
  "\n" +
  "\n" +
  "### OJ 系统的常用概念\n" +
  "\n" +
  "ac 表示你的题目通过，结果正确\n" +
  "题目限制：时间限制、内存限制\n" +
  "题目介绍\n" +
  "题目输入\n" +
  "题目输出\n" +
  "题目输入用例\n" +
  "题目输出用例\n" +
  "\n" +
  "普通测评：管理员设置题目的输入和输出用例，比如我输入 1，你要输出 2 才是正确的；交给判题机去执行用户的代码，给用户的代码喂输入用例，比如 1，看用户程序的执行结果是否和标准答案的输出一致。\n" +
  "（比对用例文件）\n" +
  "\n" +
  "特殊测评（SPJ）：管理员设置题目的输入和输出，比如我输入 1，用户的答案只要是 > 0 或 < 2 都是正确的；特判程序，不是通过对比用例文件是否一致这种死板的程序来检验，而是要专门根据这道题目写一个特殊的判断程序，程序接收题目的输入（1）、标准输出用例（2）、用户的结果（1.5） ，特判程序根据这些值来比较是否正确。\n" +
  "\n" +
  "交互测评：让用户输入一个例子，就给一个输出结果，交互比较灵活，没办法通过简单的、死板的输入输出文件来搞定\n" +
  "\n" +
  "不能让用户随便引入包、随便遍历、暴力破解，需要使用正确的算法。 => 安全性\n" +
  "判题过程是异步的 => 异步化\n" +
  "提交之后，会生成一个提交记录，有运行的结果以及运行信息（时间限制、内存限制）\n" +
  "\n" +
  "### 为什么带大家做这个项目？ \n" +
  "\n" +
  "1. 这个项目网上教程很少，基本上找不到教程\n" +
  "2. 比较新颖，写在简历上会有区分度、有亮点（人家写外卖，你写 OJ）\n" +
  "3. 能学到东西，相比于传统的 CRUD 来讲，这个项目的 CRUD 成分很少，更多的在于一些编程思想、计算机基础、架构设计方面的知识\n" +
  "4. 复杂度 “高”，很多同学觉得 OJ 很难做，一起来攻克它\n" +
  "5. 可扩展性非常强\n" +
  "\n" +
  "### 复习做项目的流程 \n" +
  "\n" +
  "1. 项目介绍、项目调研、需求分析\n" +
  "2. 核心业务流程\n" +
  "3. 项目要做的功能（功能模块）\n" +
  "4. 技术选型（技术预研）\n" +
  "5. 项目初始化\n" +
  "6. 项目开发\n" +
  "7. 测试\n" +
  "8. 优化\n" +
  "9. 代码提交、代码审核\n" +
  "10. 产品验收\n" +
  "11. 上线\n" +
  "\n" +
  "\n" +
  "\n" +
  "写文档、持续调研、持续记录总结\n" +
  "\n" +
  "### 现有系统调研 \n" +
  "\n" +
  "https://github.com/HimitZH/HOJ（适合学习）\n" +
  "\n" +
  "https://github.com/QingdaoU/OnlineJudge（python，不好学，很成熟）\n" +
  "\n" +
  "https://github.com/hzxie/voj（星星没那么多，没那么成熟，但相对好学）\n" +
  "\n" +
  "https://github.com/vfleaking/uoj（php 实现的）\n" +
  "\n" +
  "https://github.com/zhblue/hustoj（成熟，但是 php）\n" +
  "\n" +
  "https://github.com/hydro-dev/Hydro（功能强大，Node.js 实现）\n" +
  "\n" +
  "\n" +
  "\n" +
  "## 实现核心\n" +
  "\n" +
  "1）权限校验\n" +
  "谁能提代码，谁不能提代码\n" +
  "\n" +
  "**2）代码沙箱（安全沙箱）**\n" +
  "用户代码藏毒：写个木马文件、修改系统权限\n" +
  "沙箱：隔离的、安全的环境，用户的代码不会影响到沙箱之外的系统的运行\n" +
  "\n" +
  "资源分配：系统的内存就 2 个 G，用户疯狂占用资源占满你的内存，其他人就用不了了。所以要限制用户程序的占用资源。\n" +
  "\n" +
  "3）判题规则\n" +
  "题目用例的比对，结果的验证\n" +
  "\n" +
  "4）任务调度\n" +
  "服务器资源有限，用户要排队，按照顺序去依次执行判题，而不是直接拒绝\n" +
  "\n" +
  "\n" +
  "\n" +
  "### 核心业务流程\n" +
  "\n" +
  "![image-20230903171000794](.\\assets\\image-20230903171000794.png)\n" +
  "\n" +
  "> 为啥要编译？\n" +
  "> 因为有些语言不编译不能运行\n" +
  "\n" +
  "![image-20230903171044842](.\\assets\\image-20230903171044842.png)\n" +
  "\n" +
  "判题服务：获取题目信息、预计的输入输出结果，返回给主业务后端：用户的答案是否正确\n" +
  "代码沙箱：只负责运行代码，给出结果，不管什么结果是正确的。" +
  "### 实现通用路由菜单\n" +
  "\n" +
  "菜单组件：https://arco.design/vue/component/menu\n" +
  "目标：根据路由配置信息，自动生成菜单内容。实现更通用、更自动的菜单配置。\n" +
  "\n" +
  "步骤：\n" +
  "\n" +
  "- 1）提取通用路由文件\n" +
  "- 2）菜单组件读取路由，动态渲染菜单项\n" +
  "- 3）绑定跳转事件\n" +
  "- 4）同步路由的更新到菜单项高亮\n" +
  "\n" +
  "`同步高亮原理`：首先点击菜单项 => 触发点击事件，跳转更新路由 => 更新路由后，同步去更新菜单栏的高亮状态。 \n" +
  "使用 Vue Router 的 afterEach 路由钩子实现：\n" +
  "\n" +
  "```typescript\n" +
  "const router = useRouter();\n" +
  "\n" +
  "// 默认主页\n" +
  'const selectedKeys = ref(["/"]);\n' +
  "\n" +
  "// 路由跳转后，更新选中的菜单项\n" +
  "router.afterEach((to, from, failure) => {\n" +
  "  selectedKeys.value = [to.path];\n" +
  "});\n" +
  "```\n" +
  "\n" +
  "### 全局状态管理";
